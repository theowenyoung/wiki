{"version":3,"file":"component---node-modules-gatsby-theme-primer-wiki-src-templates-latest-query-js-0471ed3feda8d07d5484.js","mappings":"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","sources":["webpack://wiki/./node_modules/gatsby-theme-primer-wiki/src/components/sidebar.js","webpack://wiki/./node_modules/gatsby-theme-primer-wiki/src/components/layout.js","webpack://wiki/./node_modules/gatsby-theme-primer-wiki/src/components/tag-posts.js","webpack://wiki/./node_modules/gatsby-theme-primer-wiki/src/templates/latest-query.js","webpack://wiki/./node_modules/gatsby-theme-primer-wiki/src/components/latest-page.js","webpack://wiki/./node_modules/gatsby-theme-primer-wiki/src/utils/sidebar-items.js"],"sourcesContent":["import { Box } from \"@primer/components\";\nimport React from \"react\";\nimport { HEADER_HEIGHT } from \"./header\";\nimport NavItems from \"./nav-items\";\n\nfunction usePersistentScroll(id) {\n  const ref = React.useRef();\n\n  const handleScroll = React.useCallback(\n    // Save scroll position in session storage on every scroll change\n    (event) => window.sessionStorage.setItem(id, event.target.scrollTop),\n    [id]\n  );\n\n  React.useEffect(() => {\n    // Restore scroll position when component mounts\n    const scrollPosition = window.sessionStorage.getItem(id);\n    if (scrollPosition && ref.current) {\n      ref.current.scrollTop = scrollPosition;\n    }\n  }, [id]);\n\n  // Return props to spread onto the scroll container\n  return {\n    ref,\n    onScroll: handleScroll,\n  };\n}\n\nfunction Sidebar({ location, sidebarItems }) {\n  const scrollContainerProps = usePersistentScroll(\"sidebar\");\n\n  if (!(Array.isArray(sidebarItems) && sidebarItems.length > 0)) {\n    return null;\n  }\n  return (\n    <Box\n      display={[\"none\", null, null, \"block\"]}\n      position=\"sticky\"\n      top={HEADER_HEIGHT}\n      height={`calc(100vh - ${HEADER_HEIGHT}px)`}\n      minWidth={260}\n      maxWidth={360}\n      color=\"auto.gray.8\"\n      bg=\"auto.gray.0\"\n    >\n      <Box\n        borderStyle=\"solid\"\n        borderColor=\"border.primary\"\n        {...scrollContainerProps}\n        borderWidth={0}\n        borderRightWidth={1}\n        borderRadius={0}\n        height=\"100%\"\n        style={{ overflow: \"auto\" }}\n      >\n        <Box display=\"flex\" flexDirection=\"column\">\n          <NavItems location={location} items={sidebarItems} />\n        </Box>\n      </Box>\n    </Box>\n  );\n}\n\nexport default Sidebar;\n","import { Box } from \"@primer/components\";\nimport React from \"react\";\nimport Header from \"./header\";\nimport Sidebar from \"./sidebar\";\nimport \"../styles/global.css\";\nimport { getSidebarItems } from \"../utils/sidebar-items\";\nimport useThemeConfig from \"../use-theme-config\";\n\nfunction Layout({ children, location, pageContext }) {\n  const sidebarItems = pageContext.sidebarItems;\n  const tagsGroups = pageContext.tagsGroups;\n  const currentSlug = pageContext.slug;\n  const finalSidebarItems = getSidebarItems(sidebarItems, tagsGroups);\n  const primerWikiThemeConfig = useThemeConfig();\n\n  return (\n    <Box\n      display=\"flex\"\n      flexDirection=\"column\"\n      minHeight=\"100vh\"\n      bg=\"bg.primary\"\n      color=\"text.primary\"\n    >\n      <Header\n        currentSlug={currentSlug}\n        location={location}\n        sidebarItems={finalSidebarItems}\n        tagsGroups={tagsGroups}\n      />\n      <Box\n        display=\"flex\"\n        flex=\"1 1 auto\"\n        flexDirection=\"row\"\n        css={{ zIndex: 0 }}\n      >\n        <Sidebar location={location} sidebarItems={finalSidebarItems} />\n        <Box\n          as=\"main\"\n          flex=\"1\"\n          maxWidth={primerWikiThemeConfig.contentMaxWidth}\n        >\n          {children}\n        </Box>\n      </Box>\n    </Box>\n  );\n}\n\nexport default Layout;\n","import React from \"react\";\nimport components from \"./mdx-components\";\nimport { Box, Text } from \"@primer/components\";\nimport useThemeConfig from \"../use-theme-config\";\n\nconst TagPosts = ({\n  nodes,\n  shouldShowInstantView = false,\n  forceMobile = false,\n}) => {\n  const themeConfig = useThemeConfig();\n  const posts = nodes;\n  const AnchorTag = (props) => (\n    <components.a {...props} references={shouldShowInstantView ? posts : []} />\n  );\n  return (\n    <Box>\n      <components.ul>\n        {posts &&\n          posts\n            .filter(\n              (post) =>\n                post.fields.slug !== \"/404/\" &&\n                (!post.frontmatter || post.frontmatter.draft !== true)\n            )\n            .map((post) => {\n              return (\n                <li key={post.fields.slug}>\n                  <AnchorTag href={post.fields.slug}>\n                    {post.fields.title}\n                  </AnchorTag>\n                  {themeConfig.shouldShowLastUpdated &&\n                    post.fields.lastUpdated &&\n                    !forceMobile && (\n                      <Text\n                        display={[\"none\", null, null, \"inline-block\"]}\n                        color=\"text.placeholder\"\n                        fontSize={1}\n                      >\n                        &nbsp; - {themeConfig.lastUpdatedText}&nbsp;\n                        {post.fields.lastUpdated}\n                      </Text>\n                    )}\n                  {themeConfig.shouldShowLastUpdated &&\n                    post.fields.lastUpdated && (\n                      <Box\n                        display={\n                          forceMobile ? \"block\" : [\"block\", null, null, \"none\"]\n                        }\n                        color=\"text.placeholder\"\n                        fontSize={1}\n                        mb={2}\n                        mt={1}\n                      >\n                        {themeConfig.lastUpdatedText}&nbsp;\n                        {post.fields.lastUpdated}\n                      </Box>\n                    )}\n                </li>\n              );\n            })}\n      </components.ul>\n    </Box>\n  );\n};\nexport default TagPosts;\n","import { graphql } from \"gatsby\";\nimport LatestPage from \"../components/latest-page\";\n\nexport default LatestPage;\n\nexport const query = graphql`\n  query latestQuery {\n    site {\n      pathPrefix\n      siteMetadata {\n        siteUrl\n      }\n    }\n    allMdx {\n      nodes {\n        frontmatter {\n          title\n          draft\n        }\n        fields {\n          slug\n          title\n          lastUpdated\n          lastUpdatedAt\n          gitCreatedAt\n        }\n      }\n    }\n  }\n`;\n","import React from \"react\";\nimport Layout from \"./layout\";\nimport SEO from \"./seo\";\nimport { Box } from \"@primer/components\";\nimport urlJoin from \"url-join\";\nimport components from \"./mdx-components\";\nimport TagPosts from \"./tag-posts\";\nconst Latest = ({ data, pageContext, location }) => {\n  const pathPrefix = data.site.pathPrefix || \"\";\n  const slug = pageContext.slug;\n  const fullPath = urlJoin(pathPrefix || \"/\", slug);\n  const siteUrl = data.site.siteMetadata.siteUrl;\n  const fullUrl = urlJoin(siteUrl, fullPath);\n  const posts = data.allMdx.nodes.sort((a, b) => {\n    const aDate = new Date(a.fields.lastUpdatedAt || 0).getTime();\n    const bDate = new Date(b.fields.lastUpdatedAt || 0).getTime();\n    return bDate - aDate;\n  });\n  let firstPublistedAt = null;\n  let dateModified = null;\n  if (posts.length > 0) {\n    if (posts[posts.length - 1].fields.gitCreatedAt) {\n      firstPublistedAt = new Date(posts[posts.length - 1].fields.gitCreatedAt);\n    }\n    if (posts[0].fields.lastUpdatedAt) {\n      dateModified = new Date(posts[0].fields.lastUpdatedAt);\n    }\n  }\n  const title = `Latest Posts`;\n  const palinBody = posts.map((post) => post.fields.title).join(\", \");\n  const description = `All latest posts, ${palinBody.slice(0, 256)}`;\n  const postSeoData = {\n    title,\n    frontmatterTitle: \"\",\n    description,\n    rawBody: palinBody,\n    excerpt: description,\n    datePublished: firstPublistedAt,\n    dateModified: dateModified,\n    category: \"Latest\",\n    imageUrl: null,\n    imageAlt: \"\",\n    url: fullUrl,\n    slug: slug,\n    tags: [\"All Posts\"],\n  };\n  return (\n    <Layout pageContext={pageContext} location={location}>\n      <SEO post={postSeoData}></SEO>\n      <Box py=\"2\" px={[4, 5, 6, 7]}>\n        <components.h2>{title}</components.h2>\n        <TagPosts\n          nodes={data.allMdx.nodes}\n          shouldShowInstantView={false}\n        ></TagPosts>\n      </Box>\n    </Layout>\n  );\n};\nexport default Latest;\n","export const getSidebarItems = (sidebarItems, tagsGroups) => {\n  return sidebarItems.length > 0\n    ? sidebarItems\n    : tagsGroups.length > 0\n    ? [\n        {\n          title: \"Tags\",\n          items: tagsGroups,\n        },\n      ]\n    : [];\n};\n"],"names":["id","ref","handleScroll","location","sidebarItems","scrollContainerProps","React","event","window","sessionStorage","setItem","target","scrollTop","scrollPosition","getItem","current","onScroll","Array","isArray","length","Box","display","position","top","HEADER_HEIGHT","height","minWidth","maxWidth","color","bg","borderStyle","borderColor","borderWidth","borderRightWidth","borderRadius","style","overflow","flexDirection","items","children","pageContext","tagsGroups","currentSlug","slug","finalSidebarItems","getSidebarItems","primerWikiThemeConfig","useThemeConfig","minHeight","flex","as","contentMaxWidth","zIndex","nodes","shouldShowInstantView","forceMobile","themeConfig","posts","AnchorTag","props","references","filter","post","fields","frontmatter","draft","map","key","href","title","shouldShowLastUpdated","lastUpdated","fontSize","lastUpdatedText","mb","mt","data","pathPrefix","site","fullPath","urlJoin","siteUrl","siteMetadata","fullUrl","allMdx","sort","a","b","aDate","Date","lastUpdatedAt","getTime","firstPublistedAt","dateModified","gitCreatedAt","palinBody","join","description","slice","postSeoData","frontmatterTitle","rawBody","excerpt","datePublished","category","imageUrl","imageAlt","url","tags","py","px"],"sourceRoot":""}