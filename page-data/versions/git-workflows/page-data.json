{
    "componentChunkName": "component---node-modules-gatsby-theme-primer-wiki-src-templates-post-query-js",
    "path": "/versions/git-workflows/",
    "result": {"data":{"allSummaryGroup":{"nodes":[{"title":"Categories","items":[{"title":"Applications","url":"","external":false,"items":[{"title":"File Managers","url":"/applications/file-managers/","external":false,"items":[]},{"title":"FileBrowser Setup","url":"/applications/filebrowser-setup/","external":false,"items":[]}]},{"title":"Auth","url":"","external":false,"items":[{"title":"Use ssh key for Git","url":"/auth/git-sshkey/","external":false,"items":[]}]},{"title":"Awesome","url":"/awesome/","external":false,"items":[{"title":"Awesome Jackett Indexes","url":"/awesome/jackett-indexes/","external":false,"items":[]}]},{"title":"Backend","url":"","external":false,"items":[{"title":"Rust Environment Setup for Debian","url":"/backend/rust-debian-setup/","external":false,"items":[]}]},{"title":"Editors","url":"","external":false,"items":[{"title":"Vim Tips","url":"/editors/vim/","external":false,"items":[]},{"title":"VS Code Tips","url":"/editors/vscode/","external":false,"items":[]}]},{"title":"Frontend","url":"","external":false,"items":[{"title":"Static Site Generator","url":"/frontend/static-site-generator/","external":false,"items":[]},{"title":"SVG","url":"/frontend/svg/","external":false,"items":[]}]},{"title":"Awesome","url":"/awesome/","external":false,"items":[{"title":"Bazarr Setup","url":"/medias/bazarr-setup/","external":false,"items":[]},{"title":"Caddy File Server Browser with URL Scheme","url":"/medias/caddy-file-server-url-scheme/","external":false,"items":[]},{"title":"Setup Jackett","url":"/medias/jackett-setup/","external":false,"items":[]},{"title":"Jellyfin setup","url":"/medias/jellyfin-setup/","external":false,"items":[]},{"title":"Radarr Setup","url":"/medias/radarr-setup/","external":false,"items":[]},{"title":"Rclone Setup","url":"/medias/rclone-setup/","external":false,"items":[]},{"title":"Sonarr Setup","url":"/medias/sonarr-setup/","external":false,"items":[]},{"title":"Subtitles","url":"/medias/subtitles/","external":false,"items":[]}]},{"title":"Programming Languages","url":"","external":false,"items":[{"title":"Go Template Tips","url":"/programming-languages/go-template/","external":false,"items":[]}]},{"title":"Proxy","url":"","external":false,"items":[{"title":"Setup Caddy 2 in Debian 10","url":"/proxy/caddy/","external":false,"items":[]},{"title":"Shadowsocks Rust Setup","url":"/proxy/ss-rust/","external":false,"items":[]}]},{"title":"Server","url":"","external":false,"items":[{"title":"Benchmark","url":"/server/benchmark/","external":false,"items":[]},{"title":"Debian Server Setup","url":"/server/debian-setup/","external":false,"items":[]},{"title":"Debian add Google Chinese font","url":"/server/chinese-font-setup/","external":false,"items":[]},{"title":"Debian Open BBR","url":"/server/debian-bbr/","external":false,"items":[]},{"title":"Nodejs Setup","url":"/server/debian-nodejs-setup/","external":false,"items":[]},{"title":"Linux Common Commands","url":"/server/linux-common-command/","external":false,"items":[]},{"title":"Debian install qBittorrent with Jackett","url":"/server/qbittorrent/","external":false,"items":[]}]},{"title":"Versions","url":"","external":false,"items":[]},{"title":"Workflows","url":"","external":false,"items":[{"title":"Makefile Sample","url":"/workflows/makefile/","external":false,"items":[]}]}]}]},"mdx":{"id":"54c8d5da-782d-5f7b-b7d6-472bce914105","tableOfContents":{"items":[{"url":"#git-workflows","title":"Git workflows","items":[{"url":"#intro","title":"Intro"}]}]},"fields":{"title":"Git workflows","slug":"/versions/git-workflows/","url":"https://wiki.owenyoung.com/versions/git-workflows/","editUrl":"https://github.com/theowenyoung/wiki/tree/main/versions/git-workflows.md","lastUpdatedAt":"2021-08-25T21:34:24.000Z","lastUpdated":"8/25/2021","gitCreatedAt":"2021-08-25T21:34:24.000Z"},"frontmatter":{"title":"","description":null,"imageAlt":null,"tags":[],"date":null,"dateModified":null,"image":null},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"git-workflows\"\n  }, \"Git workflows\"), mdx(\"h2\", {\n    \"id\": \"intro\"\n  }, \"Intro\"), mdx(\"p\", null, \"See \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow\"\n  }, \"here\")), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"https://wac-cdn.atlassian.com/dam/jcr:8f00f1a4-ef2d-498a-a2c6-8020bb97902f/03%20Release%20branches.svg?cdnVersion=1770\",\n    \"alt\": null\n  })));\n}\n;\nMDXContent.isMDXComponent = true;","rawBody":"# Git workflows\n\n## Intro\n\nSee [here](https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow)\n\n![](https://wac-cdn.atlassian.com/dam/jcr:8f00f1a4-ef2d-498a-a2c6-8020bb97902f/03%20Release%20branches.svg?cdnVersion=1770)\n","excerpt":"Git workflows Intro See  here","outboundReferences":[],"inboundReferences":[{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"nodejs-monorepo\"\n  }, \"Nodejs Monorepo\"), mdx(\"h2\", {\n    \"id\": \"tools\"\n  }, \"Tools\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/atlassian/changesets\"\n  }, \"GitHub - atlassian/changesets: \\uD83E\\uDD8B A way to manage your versioning and changelogs with a focus on monorepos\")), mdx(\"h2\", {\n    \"id\": \"use-changesets-as-monorepo-manager\"\n  }, \"Use Changesets as monorepo manager\"), mdx(\"h3\", {\n    \"id\": \"init-a-monorepo\"\n  }, \"Init a monorepo\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"mkdir monorepo && cd monorepo\\ngit init\\n# Add .gitignore file for nodejs <https://github.com/github/gitignore/blob/master/Node.gitignore>\\nnpm init --yes\\n\")), mdx(\"p\", null, \"Add \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\\"private\\\":\\\"true\\\"\"), \" to the root \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"package.json\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"npm init -w packages/a\\nnpm init -w packages/b\\nnpm init -w packages/c\\n\")), mdx(\"p\", null, \"Let \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"c\"), \" depends \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"a\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"b\"), \",\"), mdx(\"p\", null, \"Add\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-json\"\n  }, \"\\\"dependencies\\\": {\\n  \\\"a\\\":\\\"^1.0.0\\\",\\n  \\\"b\\\":\\\"^1.0.0\\\"\\n}\\n\")), mdx(\"p\", null, \"to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"packages/c/package.json\")), mdx(\"h3\", {\n    \"id\": \"install-changesets\"\n  }, \"Install changesets\"), mdx(\"p\", null, \"Also see \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/atlassian/changesets/blob/main/docs/intro-to-using-changesets.md\"\n  }, \"here\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"npm install -D @changesets/cli && npx changeset init\\n\")), mdx(\"p\", null, \"This action will add a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".changeset\"), \" folder, and a couple of files to help you out:\"), mdx(\"p\", null, \"You should change the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".changeset/config.json\"), \" -> \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"baseBranch\"), \" to yourself main branch, also change \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"access\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"public\")), mdx(\"p\", null, \"Commit current files.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"git add .\\ngit commit -m \\\"feat: init\\\"\\n\")), mdx(\"p\", null, \"That's done.\"), mdx(\"h3\", {\n    \"id\": \"usage\"\n  }, \"Usage\"), mdx(\"h4\", {\n    \"id\": \"first-publish\"\n  }, \"First publish\"), mdx(\"p\", null, \"First publish you should just use the follow command to publish your module\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"npx changeset publish\\n\")), mdx(\"h4\", {\n    \"id\": \"future-changes\"\n  }, \"Future changes\"), mdx(\"p\", null, \"You should see \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/atlassian/changesets/blob/main/docs/detailed-explanation.md\"\n  }, \"changesets philosophy\")), mdx(\"p\", null, \"You should first create an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"intent to change\"), \", that said, before what ever changes you want to make, you should create a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"intent change\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"npx changeset\\n\")), mdx(\"p\", null, \"...Make some changes\"), mdx(\"p\", null, \"Now, generate new version, changeset will take care your dependences,\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Note, by default, if \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"a\"), \" upgrade from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"1.0.1\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"1.0.2\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"c\"), \" depends on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"a@^1.0.1\"), \", then \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"c\"), \" \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"package.json\"), \" will not change, cause npm will auto update \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"a@^1.0.1\"), \" to the last version \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"1.0.2\"), \"\\nif you want change to the exact version every time, you can set the config to\"), mdx(\"pre\", {\n    parentName: \"blockquote\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \" \\\"___experimentalUnsafeOptions_WILL_CHANGE_IN_PATCH\\\": {\\n    \\\"updateInternalDependents\\\": \\\"always\\\"\\n }\\n\"))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"npx changeset version\\n\")), mdx(\"p\", null, \"Then, you can publish it.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"npx changeset publish\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"git add .\\ngit commit -m \\\"chore: version\\\"\\ngit push --follow-tags\\n\")), mdx(\"h2\", {\n    \"id\": \"with-ci\"\n  }, \"With CI\"), mdx(\"p\", null, \"I'll use Github Actions as example.\"), mdx(\"p\", null, \"The CI workflow assume that you use \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/versions/git-workflows/\",\n    \"title\": \"Git workflows\"\n  }, \"git-workflows\"), \" as your git workflow.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Note, you can use \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/atlassian/changesets/tree/main/packages/changelog-github\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"@changesets/changelog-github\")), \" as your changelog format log. with this, you can generate a log like \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/theowenyoung/monorepo-example/releases/tag/%40theowenyoung%2Fpackage-example-b%401.1.0\"\n  }, \"this\"), \" , without this, then the log will only include \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/theowenyoung/monorepo-example/releases/tag/%40theowenyoung%2Fpackage-example-c%401.1.2\"\n  }, \"commit link\"), \" > \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"npm i -D @changesets/changelog-github\")), mdx(\"pre\", {\n    parentName: \"blockquote\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-json\"\n  }, \"{\\n  \\\"changelog\\\": [\\n    \\\"@changesets/changelog-github\\\",\\n    { \\\"repo\\\": \\\"theowenyoung/monorepo-example\\\" }\\n  ]\\n}\\n\"))), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Create a script in root \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"package.json\"))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-json\"\n  }, \"{\\n  \\\"scripts\\\": {\\n    \\\"version-packages\\\": \\\"changeset version\\\",\\n    \\\"release\\\": \\\"changeset publish\\\"\\n  }\\n}\\n\")), mdx(\"ol\", {\n    \"start\": 2\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Create github actions workflows\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"mkdir -p .github/workflows\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"touch .github/workflows/release.yml\\n\")), mdx(\"p\", null, \"With the following content:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-yaml\"\n  }, \"name: Release\\n\\non:\\n  workflow_dispatch:\\n  push:\\n    branches:\\n      - main\\n\\njobs:\\n  release:\\n    name: Release\\n    runs-on: ubuntu-latest\\n    steps:\\n      - name: Checkout Repo\\n        uses: actions/checkout@master\\n        with:\\n          # This makes Actions fetch all Git history so that Changesets can generate changelogs with the correct commits\\n          fetch-depth: 0\\n\\n      - name: Setup Node.js 12.x\\n        uses: actions/setup-node@master\\n        with:\\n          node-version: 12.x\\n      - name: Setup NPM Latest\\n        run: npm i -g npm\\n      - name: Install Dependencies\\n        run: npm i\\n\\n      - name: Create Release Pull Request or Publish to npm\\n        uses: changesets/action@master\\n        with:\\n          # this expects you to have a script called release which does a build for your packages and calls changeset publish\\n          publish: npm run release\\n          version: npm run version-packages\\n        env:\\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\\n          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}\\n\")), mdx(\"ol\", {\n    \"start\": 3\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Add \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"NPM_TOKEN\"), \" to your github repo secret settings\")), mdx(\"p\", null, \"By \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/programming-languages/nodejs-tips/\",\n    \"title\": \"Nodejs Tips\"\n  }, \"nodejs-tips\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"npm token create\\n\")), mdx(\"p\", null, \"Done.\"), mdx(\"p\", null, \"Every time you use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"npx changeset\"), \" to generate a new changeset intent, and the change is pulled to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"main\"), \" branch, then CI will create a pull request to generate a new version, and after the pull request was merged, CI will publish npm packages, and create a new release.\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":""},"fields":{"slug":"/versions/node-monorepo/","title":"Nodejs Monorepo"}}]}},"pageContext":{"slug":"/versions/git-workflows/"}},
    "staticQueryHashes": ["1749056788","1831670082","2426452686","2962529501","3495835395","3583993237","476497397","900254191"]}