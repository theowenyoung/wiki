{
    "componentChunkName": "component---node-modules-gatsby-theme-primer-wiki-src-templates-post-query-js",
    "path": "/jellyfin-setup/",
    "result": {"data":{"allSummaryGroup":{"nodes":[]},"mdx":{"id":"3b8e4bf3-2c31-5cec-b882-83b856505942","tableOfContents":{"items":[{"url":"#jellyfin-setup","title":"Jellyfin setup","items":[{"url":"#install","title":"Install"},{"url":"#usage","title":"Usage"},{"url":"#中文字体","title":"中文字体"},{"url":"#faq","title":"FAQ"}]}]},"fields":{"title":"Jellyfin setup","slug":"/jellyfin-setup/","url":"https://wiki.owenyoung.com/jellyfin-setup/","editUrl":"https://github.com/theowenyoung/wiki/tree/main/jellyfin-setup.md","lastUpdatedAt":"2021-08-27T02:25:34.000Z","lastUpdated":"8/27/2021","gitCreatedAt":"2021-08-27T02:25:34.000Z"},"frontmatter":{"title":"","description":null,"imageAlt":null,"tags":["Medias","Jellyfin","Setup","Self-Hosted"],"date":null,"dateModified":null,"image":null},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": [\"Medias\", \"Jellyfin\", \"Setup\", \"Self-Hosted\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"jellyfin-setup\"\n  }, \"Jellyfin setup\"), mdx(\"h2\", {\n    \"id\": \"install\"\n  }, \"Install\"), mdx(\"p\", null, \"See \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://jellyfin.org/docs/general/administration/installing.html#debian\"\n  }, \"Installing Jellyfin | Documentation - Jellyfin Project\")), mdx(\"h2\", {\n    \"id\": \"usage\"\n  }, \"Usage\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"sudo systemctl restart jellyfin\\n\")), mdx(\"h2\", {\n    \"id\": \"中文字体\"\n  }, \"\\u4E2D\\u6587\\u5B57\\u4F53\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Download google noto fonts:\\nThis \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/CodePlayer/webfont-noto\"\n  }, \"repo\"), \" compiled noto fonts, so you can just download it and use it.\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"wget https://github.com/CodePlayer/webfont-noto/raw/master/dist/NotoSans/NotoSansCJKsc-hinted/subset/NotoSansCJKsc-hinted-standard/NotoSansCJKsc-Regular.woff2\\n\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"At Jellyfin Admin dashboard, player, open back font, add the font path\"))), mdx(\"h2\", {\n    \"id\": \"faq\"\n  }, \"FAQ\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/jellyfin/jellyfin-web/issues/934\"\n  }, \"Jellyfin \\u4E2D\\u6587\\u5B57\\u4F53\\u95EE\\u9898\"))));\n}\n;\nMDXContent.isMDXComponent = true;","rawBody":"---\ntags:\n  - Medias\n  - Jellyfin\n  - Setup\n  - Self-Hosted\n---\n\n# Jellyfin setup\n\n## Install\n\nSee [Installing Jellyfin | Documentation - Jellyfin Project](https://jellyfin.org/docs/general/administration/installing.html#debian)\n\n## Usage\n\n```bash\nsudo systemctl restart jellyfin\n```\n\n## 中文字体\n\n1. Download google noto fonts:\n   This [repo](https://github.com/CodePlayer/webfont-noto) compiled noto fonts, so you can just download it and use it.\n\n   ```bash\n   wget https://github.com/CodePlayer/webfont-noto/raw/master/dist/NotoSans/NotoSansCJKsc-hinted/subset/NotoSansCJKsc-hinted-standard/NotoSansCJKsc-Regular.woff2\n   ```\n\n   At Jellyfin Admin dashboard, player, open back font, add the font path\n\n## FAQ\n\n- [Jellyfin 中文字体问题](https://github.com/jellyfin/jellyfin-web/issues/934)\n","excerpt":"Jellyfin setup Install See  Installing Jellyfin | Documentation - Jellyfin Project Usage 中文字体 Download google noto fonts:\nThis  repo  compi…","outboundReferences":[],"inboundReferences":[]}},"pageContext":{"slug":"/jellyfin-setup/"}},
    "staticQueryHashes": ["1749056788","1831670082","2426452686","2962529501","3495835395","3583993237","476497397","900254191"]}